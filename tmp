mkAnd(params);
mkOr(params);
mkNot(params[0]);
mkImplies(params);
mkXor(params);
mkEq(params);
mkDistinct(params);
mkIte(params);
mkAdd(params);
mkSub(params);
mkMul(params);
mkIand(params);
mkPow2(params[0]);
mkPow(params[0], params[1]);
mkDivInt(params[0], params[1]);
mkDivReal(params[0], params[1]);
mkMod(params[0], params[1]);
mkAbs(params[0]);
mkSqrt(params[0]);
mkSafeSqrt(params[0]);
mkCeil(params[0]);
mkFloor(params[0]);
mkRound(params[0]);
mkExp(params[0]);
mkLn(params[0]);
mkLg(params[0]);
mkLn(params[0]);
mkLog(params[0], params[1]);
mkSin(params[0]);
mkCos(params[0]);
mkTan(params[0]);
mkAsin(params[0]);
mkAcos(params[0]);
mkAtan(params[0]);
mkSinh(params[0]);
mkCosh(params[0]);
mkTanh(params[0]);
mkAsinh(params[0]);
mkAcosh(params[0]);
mkAtanh(params[0]);
mkAsech(params[0]);
mkAcsch(params[0]);
mkAcoth(params[0]);
mkAtan2(params[0], params[1]);
mkLe(params[0], params[1]);
mkLt(params[0], params[1]);
mkGe(params[0], params[1]);
mkGt(params[0], params[1]);
mkToReal(params[0]);
mkToInt(params[0]);
mkIsInt(params[0]);
mkIsDivisible(params[0], params[1]);
mkIsPrime(params[0]);
mkIsEven(params[0]);
mkIsOdd(params[0]);
mkGcd(params[0], params[1]);
mkLcm(params[0], params[1]);
mkFact(params[0]);
mkBvNot(params[0]);
mkBvNeg(params[0]);
mkBvAnd(params);
mkBvOr(params);
mkBvXor(params);
mkBvNand(params);
mkBvNor(params);
mkBvXnor(params);
mkBvComp(params[0], params[1]);
mkBvAdd(params);
mkBvSub(params);
mkBvMul(params);
mkBvUdiv(params[0], params[1]);
mkBvUrem(params[0], params[1]);
mkBvSdiv(params[0], params[1]);
mkBvSrem(params[0], params[1]);
mkBvSmod(params[0], params[1]);
mkBvShl(params[0], params[1]);
mkBvLshr(params[0], params[1]);
mkBvAshr(params[0], params[1]);
mkBvUlt(params[0], params[1]);
mkBvUle(params[0], params[1]);
mkBvUgt(params[0], params[1]);
mkBvUge(params[0], params[1]);
mkBvSlt(params[0], params[1]);
mkBvSle(params[0], params[1]);
mkBvSgt(params[0], params[1]);
mkBvSge(params[0], params[1]);
mkBvConcat(params);
mkBvToNat(params[0]);
mkNatToBv(params[0], params[1]);
mkIntToBv(params[0], params[1]);
mkBvToInt(params[0]);
mkFpAbs(params[0]);
mkFpNeg(params[0]);
mkFpAdd(params);
mkFpSub(params);
mkFpMul(params);
mkFpDiv(params);
mkFpFma(params);
mkFpSqrt(params[0]);
mkFpRem(params[0], params[1]);
mkFpRoundToIntegral(params[0]);
mkFpMin(params);
mkFpMax(params);
mkFpLe(params[0], params[1]);
mkFpLt(params[0], params[1]);
mkFpGe(params[0], params[1]);
mkFpGt(params[0], params[1]);
mkFpEq(params[0], params[1]);
mkFpToUbv(params[0], params[1]);
mkFpToSbv(params[0], params[1]);
mkFpToReal(params[0]);
mkToFp(params[0], params[1], params[2]);
mkFpIsNormal(params[0]);
mkFpIsSubnormal(params[0]);
mkFpIsZero(params[0]);
mkFpIsInf(params[0]);
mkFpIsNan(params[0]);
mkFpIsNeg(params[0]);
mkFpIsPos(params[0]);
mkSelect(params[0], params[1]);
mkStore(params[0], params[1], params[2]);
mkStrLen(params[0]);
mkStrConcat(params);
mkStrSubstr(params[0], params[1], params[2]);
mkStrPrefixof(params[0], params[1]);
mkStrSuffixof(params[0], params[1]);
mkStrIndexof(params[0], params[1], params[2]);
mkStrCharat(params[0], params[1]);
mkStrUpdate(params[0], params[1], params[2]);
mkStrReplace(params[0], params[1], params[2]);
mkStrReplaceAll(params[0], params[1], params[2]);
mkStrToLower(params[0]);
mkStrToUpper(params[0]);
mkStrRev(params[0]);
mkStrSplit(params[0], params[1]);
mkStrLt(params[0], params[1]);
mkStrLe(params[0], params[1]);
mkStrGt(params[0], params[1]);
mkStrGe(params[0], params[1]);
mkStrInReg(params[0], params[1]);
mkStrContains(params[0], params[1]);
mkStrIsDigit(params[0]);
mkStrFromInt(params[0]);
mkStrToInt(params[0]);
mkStrToReg(params[0]);
mkStrToCode(params[0]);
mkStrFromCode(params[0]);
mkRegNone();
mkRegAll();
mkRegAllChar();
mkRegConcat(params);
mkRegUnion(params);
mkRegInter(params);
mkRegDiff(params);
mkRegStar(params[0]);
mkRegPlus(params[0]);
mkRegOpt(params[0]);
mkRegRange(params[0], params[1]);
mkRegRepeat(params[0], params[1]);
mkRegComplement(params[0]);
applyFun(fun_key_map[s], params);
mkErr(ERROR_TYPE::ERR_UNKWN_SYM);